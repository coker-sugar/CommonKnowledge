一、Object.create()
// Object.create() 方法创建一个新对象，使用现有的对象来提供新创建的对象的_proto_
    
    // ① 解释:Object.create(proto,[propertiesObject])
    // proto: 新创建对象的原型对象，必须为null或者原始包装对象，否则会抛出异常
    // propertiesObject:可选参数,需要是一个对象,该对象的自有可枚举属性(自身定义的属性,不是原型链上的枚举属性) 将为新创建的对象添加 指定的属性值和对应的属性描述符
    
    // ② 分类
    // 1.不传递propertiesObject
    const createObj = {
        name: 'zs'
    }
    const newCreateObj = Object.create(createObj);
    console.log(newCreateObj) // {} createObj 作为 newCreateObj 的原型,name属性仍然放在newCreateObj的原型createObj中
    console.log(newCreateObj.__proto__); // {name: 'zs'}
    // 2.传递propertiesObject
    const properCreateObj = {
        name:'zs'
    }
    const newpropCreateObj = Object.create(properCreateObj, {
        name: {
            value: 'ad',
            writable: true,
            configurable: true,
            enumerable: true
        },
        age: {
            value: 11,
            writable: true,
            configurable: true,// 可以被删除
            enumerable: true
        }
    })
    console.log(newpropCreateObj);
    
    // ③ 为什么要使用Object.create()? 
    const creobj = {
        name:'ni'
    }
    const newCreObj = Object.create(creobj)
    const newCre1Obj = Object(creobj)
    console.log(creobj); // {name:'ni'}
    console.log(newCreObj); // {}
    console.log(newCre1Obj); // name:'ni'
    console.log(creobj === newCre1Obj); // true
    console.log(creobj === newCreObj); // false
    // 我们发现使用Obect()创建的对象和直接创建的对象 是一致的,引用地址也是一致的
    // 使用Object.create()创建的对象和creobj隔了一层,实现了引用地址解耦,当修改newCreObj的时候,不会影响原有数据
    
    // ④ 如何实现Object.create()?
    const creat = function(proto) {
        if(typeof proto !== "object" && typeof proto !== "function") {
            throw new TypeError("proto必须是对象或者函数")
        } else if(proto === null) {
            throw new Error("在浏览器中暂不支持传递null")
        }
        // 创建一个构造函数
        function F() {}
        // 更改该函数的原型prototype
        F.prototype = proto
        // 返回构造函数的实例,这个时候返回的实例和传入的proto中间隔了一层 F
        return new F()
    }
    const myCreateObj = creat(createObj);
    console.log(myCreateObj);


二、instanceof
console.log([1,2,3] instanceof Object); // true
    // 分别获取左右两边对象的原型:
        // 左边是实例对象,使用getProtoTypeOf(left)获取左边对象的原型
        // 右边是构造函数,使用right.prototype获得右边对象的原型
    // 左边对象一直往上找,直到找到和右边对象原型相等了就返回true;
    // 如果左边对象为null了就返回false

    function myInstanceof(left,right) {
        let proto = Object.getPrototypeOf(left),prototype = right.prototype;
        // 获取对象的原型,获取构造函数的prototype

        // 判断构造函数的prototype对象是否在对象的原型链上
        while(true) {
            if(!proto) return false;
            if(proto === prototype) return true;
            proto = Object.getPrototypeOf(proto);
        }
    }
    console.log(myInstanceof({name:'zs',age:18},Object));


三、new操作符
// new操作实现
    function Person(name,age) {
        this.name = name;
        this.age = age;
    }
    Person.prototype.sayName = function() {
        console.log(this.name);
    }
    const person = new Person('ang',18)
    console.log(person);
    person.sayName()


    // 实现new
    function objectFactory(construct,...args) {
        // 返回一个对象,在内部创建一个对象
        let obj = {}
        // 绑定构造函数construct的原型 obj
        Object.setPrototypeOf(obj,construct.prototype)
        // 等价于
        // obj.__proto__ = construct.prototype

        // 把 obj 绑定到 construct 构造函数上,并且传入剩余的参数
        let result = construct.apply(obj,args)
        // 判断返回的result是否是一个对象,如果是就返回result,如果不是就返回obj
        return result instanceof Object ? result : obj
    }
    const p = objectFactory(Person,'yugang',18)
    console.log(p);


八、手写防抖
<!-- 防抖：n秒内只触发一次事件 -->
    <!-- 1.防抖的使用 -->
    <div>
        账户：<input type="text" id="myinput">
    </div>
    <script>
        function debounce(func,time = 1500) { // es6语法，设置默认参数值1500
            let timeout = null;
            return function() {
                if(timeout) clearTimeout(timeout)
                timeout = setTimeout(function() {
                    func()
                },time)
            }
        }
        function testName() {
            console.log('输入结束！');
        }
        document.getElementById('myinput').addEventListener('input',debounce(testName,1000))

    // 2.需要解决的问题
    // 无论是防抖还是节流，我们都要解决两个问题，this指向和arguments。
    // 如果没有特殊指向，setInterval和setTimeout的回调函数中this的指向都是window。这是因为JS的定时器方法是定义在window下的。
    // 这显然不是我们希望的，因为我们监听的是input输入框，所以我们希望定时器里面的this指向input。
    
    // 解决方案： 用参数把定时器的this和argument保存下来，再通过apply改变定时器要执行的函数fun指向
    // let _ = this,argument = arguments
    // fn.apply(_,argument)

    // 3.手写防抖方法
    function deBounce(fn,wait) {
        let timer = null
        return function() {
            let context = this, args = arguments
            if(timer) { // 如果存在定时器，取消之前的定时器重新计时
                clearTimeout(timer)
                timer = null
            }
            timer = setTimeout(()=> { // 设置定时器，使事件间隔指定时间后执行
                console.log(context); // <input type="text" id="myinput">
                console.log(args); // Arguments [InputEvent, callee: ƒ, Symbol(Symbol.iterator): ƒ]
                fn.apply(context,args)
            },wait) 
        }
    }
    // 测试样例
    document.getElementById('myinput').addEventListener('input',deBounce(testName,1000))
    
    // 4.防抖的使用场景
    // 连续事件只需触发一次回调的场合
    // 比如：
        // - 搜索框的输入，只需要最后一次输入完再发送请求
        // - 用户名，手机号，邮箱输入验证
        // - 浏览器窗口大小改变后，只需窗口调整完后，再执行resize事件中的代码，防止重复渲染
    </script>


九、手写节流代码
<body>
    <!-- 节流：事件在一定时间内只能执行一次 -->
    <!-- 1.节流的使用 -->
    <button id="btn">
        请点击我
    </button>
<script>
    function debounce(fun,wait=1000) {
        let timer = null
        return function() {
            if(!timer) {
                timer = setTimeout(function() {
                    fun()
                    timer = null
                },wait)
            }
        }
    }
    function sayClick() {
        console.log('我被点击了');
    }
    document.getElementById('btn').addEventListener('click',debounce(sayClick))

    // 2.节流同样要解决this和arguments的问题

    // 3.手写节流方法
    function throttle(fn,delay=1000) {
        let curTime = Date.now()
        return function() {
            let _this = this,args = arguments,nowTime = Date.now()
            if(nowTime - curTime >= delay) {
                curTime = Date.now()
                return fn.apply(_this,args)
            }
        }
    }
    document.getElementById('btn').addEventListener('click',throttle(sayClick))

    // 4.使用场景
    // - 懒加载，滚动加载，监听滚动条
    // 搜索联想功能
    // 防止高频点击提交，防止表单重复提交
</script>
</body>

十、手写类型判断函数代码
    // 1.现有判断数据的类型
    console.log(typeof(1));  // number
    console.log([1,2,3] instanceof Object); // true
    console.log(Object.prototype.toString.call({})); // [object Object]
    // 出现的问题：
        // 1.typeof得到的类型不符合预期，如null——>object，[1,2,3]——>object，有些本不是object类型的数据被找成为object
        // 2.instanceof并不清楚数据的类型是什么，要一个一个的试
    
    // 2.借助Object.prototype.toString.call()实现getType函数
    function getType(value) {
        // 如果数据是null就返回""
        if(value === null) return value + ""
        // 判断数据是引用类型的情况
        if(typeof value === "object") {
            let valueClass = Object.prototype.toString.call(value)
            // 使用Object.prototype.toString.call()这个方法得到的是一个字符串类型的，如"[object Array]"
            // 需要将字符串的前半部分去掉，同时去掉引号转为数组
            let type = valueClass.split(" ")[1].split("")
            type.pop()
            // 去除数组的最后的一个']'符号
            // 将数组中所有字符都转为小写，返回一个字符串形式数据
            return type.join("").toLowerCase()
        } else {
            return typeof value
        }
    }
    console.log(getType(null)); // null
    console.log(getType([1,2,3,4])); // array
    console.log(getType(function(){})); // function


十一、手写call函数
<script>
    // 1.call的作用
    function a() {
        console.log(this);
    }
    a()   // Window
    a.call({name:'西瓜'})  // Object ——> {name: '西瓜'}

    // 2.手写call函数
    Function.prototype.myCall = function(context) {
        // 判断对象是否为函数，不是输出error
        if(typeof this !== "function") console.error("type error");
        // 获取传入的参数: 利用解构赋值语法获得所有的参数,只需要第二个参数
        let args = [...arguments].slice(1), result = null
        // console.log( [...arguments]);// [{name: '黄瓜'},['123', 123]]
        // console.log(args); // ['123', 123]
        // 判断传入上下文对象是否存在,如果不存在就设置为window
        context = context || window
        // 把函数挂载到对象 context 上
        context.fn = this // 这个this就是a方法
        // 获取执行函数fn产生的返回值
        result = context.fn(...args)
        // console.log(...args); // ['123', 123]
        // console.log(result);
        // 删除属性
        delete context.fn
        // 返回结果
        return result
    }
    a.myCall({name:"黄瓜"},['123',123]) // {name: '黄瓜', fn: ƒ}

    Function.prototype.mycall = function(context) {
        // 判断对象是否是函数,不是就输出error
        if(typeof this !== 'function') console.error('type error')
        // 获得传入的参数,定义返回结果
        let args = [...arguments].slice(1),result = null;
        // 判断传入的对象是否存在,不存在就返回window
        context = context || window
        // 把函数 挂载到 对象 context.fn 上
        context.fn = this
        // 获取 执行content.fn 的返回值
        result = context.fn(...args)
        // 删除 content.fn 
        delete context.fn
        // 返回结果
        return result 
    }
    a.mycall({name:'哈密瓜'},[123,'123'])

</script>


十二、手写apply函数
<script>
    Function.prototype.myApply = function(context) {
    // 判断对象是否为函数,不为函数抛出错误
    if(typeof this !== 'function') throw new TypeError("Error")
    // 新定义结果为null
    let result = null
    // 判断传入的对象是否存在,不存在设置为window
    context = context || window
    // 把函数挂载到 对象上
    context.fn = this
    // 调用对象的方法
    if(arguments[1]) {
        result = context.fn(...arguments[1])
    } else {
        result = context.fn()
    }
    // 删除属性
    delete context.fn
    // 返回结果
    return result
    }

    function a() {
        console.log(this);
    } 
    a() // window
    a.myApply({name:"傻瓜"}) // {name: '傻瓜', fn: ƒ}

    Function.prototype.myapply = function(context) {
        if(typeof this !== "function") throw new TypeError("Error")
        let result = null;
        context = context || window
        context.fn = this
        if(arguments[1]) {
            context.fn(...arguments[1])
        } else {
            context.fn()
        }
        delete context.fn
        return result
    }
    a.myapply({name:"笨蛋"})
</script>


十三、手写call函数
<script>
    Function.prototype.myBind = function(context) {
    // 判断对象是否为函数,如果不是抛出错误
        if(typeof this !== "function") throw new TypeError('Error')
    // 获取参数,获取当前this值
        let args = [...arguments].slice(1),fn = this
    // 创建一个匿名函数返回
        return function Fn() {
            // 函数内部使用apply绑定函数调用
            return fn.apply(
                this instanceof Fn ? this : context,
                args.concat(...arguments)
            )
        }    
    }
    
    function a() {
        console.log(this);
    }
    a.myBind({name:'哈哈'})() // 注意bind返回的是一个函数
    a.bind({name:'真的bind'})()
    console.log(a.bind({name:'真的bind'},123,'123'))

    Function.prototype.mybind = function(context) {
        if(typeof this !== 'function') throw new TypeError('Error')
        let args = [...arguments].slice(1), fn = this
        return function Fn() {
            return fn.apply(
                Fn instanceof fn ? this : context,
                args.concat(...arguments)
            )
        }        
    }
    a.mybind({name:"再次bind"})()
</script>

十四、函数柯里化
<script>
    // 1.柯里化指的是将使用多个参数的一个函数转换为一系列使用一个参数的函数
    function sum(a,b) {
        console.log(a + b);
    }
    sum(1,2)
    sum(1,3)
    // 我们发现参数1都是不变的，所以定义一个cur，始终包含参数a，然后返回一个函数sum1，在sum1中执行操作
    function cur(a) {
        return (b) => {
            console.log(a+b);
        }
    }
    let sum1 = cur(1)
    sum1(2)
    sum1(3)
    // 那如果有多个参数是不变的呢？那么就是一个不断封装函数的过程
    function sum2(a,b,c,d) {
        console.log(a+b+c+d);
    }
    function sum3(a) {
        return function sum4(b) {
            return function sum5(c) {
                return function sum6(d) {
                    console.log(a+b+c+d);
                }
            }
        }
    }
    sum3(1)(2)(3)(4)
    // 但是不美观，于是我们提出柯里化
    console.log('..................');
    // 2.函数柯里化手写代码
    function curry(fn,args) {
        // 获取函数需要的参数长度,也可以理解成像上面一样会一直生成多少个函数
        let length = fn.length
        args = args || []
        return function() {
            let subArgs = args.slice(0)
            // 拼接得到的现有的所有参数
            for(let i = 0;i < arguments.length;i ++) {
                subArgs.push(arguments[i])
                // console.log(subArgs); // 依次为 [10] [10,3] [10,3,4]
            }
            // 判断参数的长度是否满足函数需要的参数的长度
            if(subArgs.length >= length) {
                // 如果满足，执行函数
                // console.log(this); // Window
                return fn.apply(this,subArgs)
            } else {
                // 如果不满足，递归返回柯里化函数，等待参数传入
                return curry.call(this,fn,subArgs)
            }
        }
    }
    // 2.作用：减少重复传递的不变参数,也就是一个函数中的参数固定有一个不改变，另一个参数修改
    function multiplie(a,b,c) {
        return a*b*c
    }
    var mutil = curry(multiplie)
    var mutl = mutil(10) // 永远以10作为函数的第一个参数
    console.log(mutl(3,4))
    // console.log(mutl(4,5))
    // console.log(mutl(5,6))

    // 3.复现
    // 定义一个方法包含函数和传入的参数
        // 获取函数需要的参数长度
        // 如果传入的参数的空那么就置为[]
        // 返回一个函数
            // 定义一个数组接收参数
            // 给数组拼接参数
            // 如果数组长度大等于函数需要的参数长度
                // 就执行传入的函数
            // 否则
                // 递归柯里化函数等待参数
    function curr(fn,args) {
        let length = fn.length
        args = args || []
        return function() {
            let newArr = args.slice(0)
            for(let i = 0;i < arguments.length;i ++) {
                newArr.push(arguments[i])
            }
            if(newArr.length >= length) {
                return fn.apply(this,newArr)
            } else {
                return curr.call(this,fn,newArr)
            }
        }
    }
    var mu = curr(multiplie)
    var m = mu(10)
    console.log(m(3,4));
</script>

十五、实现AJAX请求
<script>
    const SERVER_URL = "/server";
    let xhr = new XMLHttpRequest();
    // 创建 Http 请求
    xhr.open("GET", SERVER_URL, true);
    // 设置状态监听函数
    xhr.onreadystatechange = function() {
      if (this.readyState !== 4) return;
      // 当请求成功时
      if (this.status === 200) {
        handle(this.response);
      } else {
        console.error(this.statusText);
      }
    };
    // 设置请求失败时的监听函数
    xhr.onerror = function() {
      console.error(this.statusText);
    };
    // 设置请求头信息
    xhr.responseType = "json";
    xhr.setRequestHeader("Accept", "application/json");
    // 发送 Http 请求
    xhr.send(null);

    // 获取url
    // 创建XMLHttpRequest实例
    // 创建http请求
    // 设置状态监听函数
        // 如果readyState不为4返回
        // 如果请求成功，处理请求
        // 否则输出错误
    // 设置请求失败的监听函数
    // 设置请求头信息
    // 发送请求

    const url = "/server"
    const xr = new XMLHttpRequest()
    xr.open("GET",url,true)
    xr.onreadystatechange =function(){
        if(this.readyState !== 4) return 
        if(this.status === 200) {
            handle(this.response)
        } else {
            console.error(this.statusText)
        }
    }
    xr.onerror = function() {
        console.error(this.statusText)
    }
    xr.responseType = "json"
    xr.setRequestHeader("Accept","application/json")
    xr.send()
</script>

十六、使用promise封装AJAX
<script>
    // promise封装实现
    function getJSON(url) {
        // 创建promise对象
        let promise = new Promise(function(resolve,reject) {
            // 创建XMLHttpRequest请求
            let xhr = new XMLHttpRequest()
            // 新建一个http请求
            xhr.open("GET",url,true)
            // 设置状态监听函数
            xhr.onreadystatechange = function() {
                if(this.readyState !== 4) return 
                if(this.status === 200) {
                    resolve(this.response)
                } else {
                    reject(new Error(this.statusText))
                }
            }
            // 设置错误监听函数
            xhr.onerror = function() {
                reject(new Error(this.statusText))
            }
            // 设置响应的数据类型
            xhr.responseType = "json"
            // 设置请求头的信息
            xhr.setRequestHeader("Accept","application/json")
            // 发送http请求
            xhr.send(null)
        })
        return promise;
    }

    function getJson(url) {
        let promise = new Promise((resolve,reject)=> {
            let xhr = new XMLHttpRequest()
            xhr.open("GET",url,true)
            xhr.onreadystatechange = function() {
                if(this.readyState !== 4) return
                if(this.status === 200) {
                    resolve(this.response)
                } else {
                    reject(new Error(this.statusText))
                }
            }
            xhr.onerror = function() {
                reject(new Error(this.statusText))
            }
            xhr.responseType = "json"
            xhr.setRequestHeader("Accept","application/json")
            xhr.send
        })
        return promise;
    }
</script>

十七、实现浅拷贝
<script>
/* 浅拷贝： 一个新对象对原始对象的属性值进行精确地拷贝
    - 如果拷贝基本数据类型，拷贝的就是基本数据类型的值
    - 如果拷贝引用数据类型，拷贝的就是内存地址
实现浅拷贝的方法：
    1.Object.assign()
        1.1 是ES6中对象的拷贝方法，接受第一个参数是目标对象，其余参数是源对象
        1.2 用法Object.assign(target,source1,source2...)
        1.3 注意事项：
            - 目标对象和源对象有同名属性 或者 多个源对象有同源属性，后面的属性会覆盖前面的属性
            - 如果函数只有一个参数，当参数为对象时，直接返回该对象；当参数不是对象时，会先将参数转为对象然后返回
            - 因为 null 和 undefined 不能转为对象，所以第一个参数不能是 null 和 undefined，会报错
    2.扩展运算符
        2.1 使用扩展运算符可以在构造字面量对象的时候，进行属性拷贝
        2.2 语法let cloneObj = {...obj}
    3.数组方法实现数组浅拷贝
        3.1 Array.prototype.slice()
            - 用法：array.slice(start,end) 
            - 该方法不改变原数组
            - 该方法有两个可选参数，如果都不写，就可以实现数组浅拷贝
        3.2 Array.prototype.concat()
            - concat()方法用于合并两个或多个数组，此方法不会更改现有数组，而是返回一个新数组
            - 该方法有两个可选参数，如果都不写，就可以实现数组浅拷贝
    4.手写实现
*/
    // 1. Object.assign(target,souce1,souce2../)
    let target = {a: 1}
    let obj1 = {b: 2}
    let obj2 = {c: 3}
    Object.assign(target,obj1,obj2)
    console.log(target);
    console.log(target instanceof Object);

    // 2. let cloneObj = {...obj}
    let object1 = {a: 1,b: {c: 1}}
    let object2 = {...object1}
    object1.a = 2
    console.log(object1); //{a:2,b:{c:1}}
    console.log(object2); //{a:1,b:{c:1}} 说明是新建了一个值，改变原对象，新对象不变
    object2.b.c = 2
    console.log(object1); //{a:2,b:{c:2}}
    console.log(object2); //{a:1,b:{c:2}} 说明对象内部的对象还是用的同一个内存

    // 3. 数组方法
    let arr = [1,2,3]
    // Array.prototype.slice()
    console.log(arr.slice()); // [1,2,3]
    console.log(arr.slice() === arr); // false

    // Array.prototype.concat()
    console.log(arr.concat()); // [1,2,3]
    console.log(arr.concat() === arr); // false

    // 4.手写实现
    function shallowCopy(obj) {
        // 只拷贝对象
        if(!obj || typeof obj !== 'object') return;
        // 根据object的类型判断是新建一个数组还是对象
        let newObj = Array.isArray(obj) ? [] : {}
        // 遍历obj判断obj的属性才拷贝
        for(let key in obj) {
            if(obj.hasOwnProperty(key)) {
                newObj[key] = obj[key]
            }
        }
        return newObj
    }
    console.log(shallowCopy(arr));
    console.log(shallowCopy({a:1,b:{c:2}}));
</script>

十八、实现深拷贝
<script>
/* 深拷贝：如果遇到属性值为引用类型时，会新建一个引用类型并将对应的值复制给它
    - 获得的新的引用类型而不是一个原有的类型的引用
    - 可以用JSON的两个函数实现，但是由于JSON对象格式更严格，所以属性值里边出现“函数”或者“Symbol”类型的值时会转换失败
实现深拷贝的方法：
    1. JSON.stringify()
        1.1 JSON.parse(JSON.stringify(obj)) 是比较常用的深拷贝的方法之一
            - 原理：利用JSON.stringify()将js对象序列化(JSON字符串)，再利用JSON.parse()来反序列化(还原)js对象
        1.2 该方法简单粗暴，但是存在问题，拷贝的对象如果有“函数”，“undefined”，“symbol”使用JSON.stringify()进行处理之后都会消失
    2. 使用lodash的_.cloneDeep方法
    3. 手写实现深拷贝函数
*/
    // 1. JSON.stringify()
    let obj = {
        a: 0,
        b: {
            c: 0
        }
    }
    let obj1 = JSON.parse(JSON.stringify(obj))
    obj.a = 1;
    obj1.b.c = 1;
    console.log(obj); // { a: 1,b: {c: 0} }
    console.log(obj1); // { a: 0,b: {c: 1} }

    // 2. lodash的_.cloneDeep
    // var _ = require('lodash')
    // var obj2 = _.cloneDeep(obj)
    // console.log(obj2);

    // 3. 手写实现深拷贝函数
    function deepCopy(obj) {
        if(!obj || typeof obj !== 'object') return ;
        let newObj = Array.isArray(obj) ? [] : {}
        for(let key in obj) {
            if(obj.hasOwnProperty(key)) {
                newObj[key] =
                    typeof obj[key] === "object" ? deepCopy(obj[key]) : obj[key]
            }
        }
        return newObj
    }
    let obj2 = deepCopy(obj)
    obj2.a = 999;
    console.log(obj);
    console.log(obj2);
</script> 
